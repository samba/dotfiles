# screen runtime configuration
# see also:
#   http://www.delhage.se/.screenrc
#   http://companionway.net/files/utils/sample.screenrc
#   https://gist.github.com/yoshikaw/5604167

# NB: this requires features of screen in versions >= 4.8.0


# Some automatically started windows
screen -t 'htop' 0 htop -H 2 --sort-key=PERCENT_CPU

# working shells...
# These are disabled for now until I fix my shell config to stop beeping automatically. See "TODO" below.
# screen 1 bash
# screen 2 bash



# limit the total number of windows created
maxwin 20

# lots of history
defscrollback 50000

# detach on hangup.
autodetach on

# If a window goes unresponsive, don't block the whole session waiting for it.
nonblock on

# use C-\  instead of C-a for screen control char
# escape \034\034

# use C-[ instead of C-a - this also matches the ESC key in many systems.
# escape ^[x

# Simulate F1 to bypass gnome-terminal and the like from picking it up... use C-a F1
# bind k1 stuff k1

# Stop screen from catching C-S and C-Q, XON and XOFF
defflow off

# Set the hardstatus prop on gui terms to set the titlebar/icon title
termcapinfo xterm* 'hs:ts=\E]0;:fs=\007:ds=\E]0;\007'

# set these terminals up to be 'optimal' instead of vt100
termcapinfo xterm*|linux*|rxvt*|Eterm* OP

# Allow mac mouse scrolling to scroll in screen's scrollback buffer.
# NB: this breaks mouse scrolling in vim.
# cf. http://slaptijack.com/system-administration/mac-os-x-terminal-and-gnu-screen-scrollback/
# termcapinfo xterm* ti@:te@

# Force 256 color handling properly
attrcolor b ".I"
defbce "on"

# remove underline? (removes "dim" attribute from default)
# https://superuser.com/questions/189498/gnu-screen-affects-the-display-of-my-terminal
attrcolor d -d

# switch window focus with mouse clicks
defmousetrack on


# Filename for the paste buffer
bufferfile screen.buf

altscreen on
startup_message off
defutf8 on

activity "Activity in #%n %t (%f) at %c"
bell "Bell on #%n %t (%f) at %c: %h ^G"
vbell_msg "Bell on #%n %t (%f) %h"
vbellwait 0.5
vbell off

# Disable screen locking
bind x

# Evil evil keybindings. Do Not Want!
bind ^\
bind \\
bind ^h
bind h
bind ^Q
bind q
bind ^S
bind s

# for launching some of the stuff I use most
# bind v screen vim --servername vim  # this doesn't work on Mac anyway.
bind t screen -t '(h)top' bash -c "command -v htop > /dev/null && htop || top"
bind R screen -t '# |root:' sudo -i
bind B screen -t '$ |debug:' bash -x -l -i



# set C-a <space> to show the window list
bind ' ' windowlist -m
bind w windowlist -m
bind ^W windowlist -g -m


# easily adjust window sizing
bind + resize -l +5
bind - resize -l -5
bind = resize -l 50%

# switch focus to other region (like vim)
# override default `h'(hardcopy), `k'(kill), `l'(redisplay) mapping
bind h focus left
bind j focus down
bind k focus up
bind l focus right

# override default  `t'(time), `b'(break) mappings.
# bind t focus top
# bind b focus bottom




# control message line
bind J eval 'command -c messageline' 'echo "hardstatus: [a]lwayslastline [i]gnore [l]astline [m]essage / caption: al[w]ays [s]plitonly / [r]estore all [_] ignore all"'
bind -c messageline a eval 'hardstatus alwayslastline'
bind -c messageline i eval 'hardstatus ignore'
bind -c messageline l eval 'hardstatus lastline'
bind -c messageline m eval 'hardstatus message'
bind -c messageline w eval 'caption always'
bind -c messageline s eval 'caption splitonly'
bind -c messageline _ eval 'hardstatus ignore' 'caption splitonly'
bind -c messageline r eval 'hardstatus alwayslastline' 'caption always'

# See layouts definition below.
# trigger for layout sub-commands
bind ^Y eval 'command -c layout' 'layout show'
bind y  eval 'command -c layout' 'layout show'

# switch to the layout identified by number or title (not prefix of a title)
bind -c layout \' eval 'layout select' 'layout show'

# continuous switch to another layout
bind -c layout ^N eval 'layout next' 'command -c layout' 'layout show'
bind -c layout ^P eval 'layout prev' 'command -c layout' 'layout show'

# switch to another layout
bind -c layout n eval 'layout next'
bind -c layout p eval 'layout prev'
bind -c layout 0 eval 'layout select 0'
bind -c layout 1 eval 'layout select 1'
bind -c layout 2 eval 'layout select 2'
bind -c layout 3 eval 'layout select 3'
bind -c layout 4 eval 'layout select 4'
bind -c layout 5 eval 'layout select 5'
bind -c layout 6 eval 'layout select 6'
bind -c layout 7 eval 'layout select 7'
bind -c layout 8 eval 'layout select 8'
bind -c layout 9 eval 'layout select 9'

# each window should be a login shell...
# deflogin on # this one fails on Mac OS X
shell -${SHELL} # this may cause problems with key interpretation, e.g. backspace

# terminal sharing
multiuser on # so I can attach from multiple points.

# The title escape sequence should override the automatic title
defdynamictitle on

# Use a default name of ">" but try to read command title when possible.
shelltitle "> |shell"


# battery status
backtick 1 10 10 bash -c "pmset -g batt | egrep -o '[0-9]+%; \w+; \d+:\d+'"

# free memory status
backtick 2 5 5 bash -c "memory_pressure | grep 'free percentage' | cut -d ':' -f 2 | tr -d ' '"

# The following flags can be applied in hardstatus and caption declarations.
# %t = title of the current window
# %h = hard status of the current window
# %H = hostname
# %X = executed command without args
# %x = executed command with args
# %l = system Load
# %n = window number
# %f = window flags
# %u = (other) users of this window
# %s = window size


hardstatus string "%{d dd}%{+d} %{+ .m}%n%{-} %{+ .g}%t%{-} %= %{+ .C}%h%{-} %{+ .y}%H%{-} %{+ .K}%1`%?%{-} %{+ .r}%2`%?%{-} %{+d .g}%l%{-} %{+ .y}%0c:%s%{-} "
hardstatus alwaysfirstline

caption string "%{d dd}%?%F%{+bu .M}%:%{+ .m}%?%n%{-} %?%F%{+bu .G}%:%{+ .g}%?%t%{-} %= %{+ .C}%h%{-}"
caption top splitonly

# configure the window list
windowlist title "%{.k.}%{+b .y}Num%{-} %{+b .b}Flags%{-} %{+b .g}Title%{-} %= %{+b .y}Hardstatus%{-}%{-.K.}"
windowlist string "%{.dk}%{+ .y}%3n%{-}%{-bs} %3= %{+ .B}%f%{- .B} %?%F%{+ .w}>%{- .w}%: %? %{+ .g}%t%{- .w} %{ddd} %= %{+ .y}%h%{- .y}"

# Ensure that resizes won't shrink any window beyond usability
focusminresize 10 10

# Configure some nice layouts
layout autosave on

# Layout 0: just the usual.
layout new 0:single
select 0


# Layout 1: split vertically, one large on top and small on bottom.
# +-----------------------+
# |                       |
# |                       |
# |                       |
# +-----------------------+
# |                       |
# +-----------------------+
layout new 2:hsplit
# select 1 # TODO: reenable this when shell config stops beeping
split
resize -l 50%
focus down
resize -l 20
resize -l 10 min
select 0
focus top


# Layout 2: split horizontally, and then vertically
# +--------------+--------+
# |              |        |
# |              |        |
# |              +--------+
# |              |        |
# |              |        |
# +--------------+--------+
layout new 1:vsplit2
split -v
# select 1 # TODO: reenable this when shell config stops beeping
resize -l 80%
resize -l 60 min
focus right
resize -l 20 min
resize -l 50%
# select 2 # TODO: reenable this when shell config stops beeping
split
focus down
select 0
focus left


layout select single
# layout show

# vim: foldmethod=marker foldenable ft=screen
